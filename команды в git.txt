Команды для unix терминала:
ls -la - какие файлы в папке в которой нходишься
cd /D - сменить диск на D
pwd - узнать путь до папки в которой находишься
touch - создать файл
mkdir - создать папку
cat - прочесть файл в терминале (не заходя в среду vim или аналог)
echo "ТЕКСТ" < файл - перезаписать в файл текст
echo "ТЕКСТ" << файл - добавить в файл текст

unlink файл - удалить файл
rm FILE - удалить FILE, если оставить то будут удалены все файлы с именем FILE1, FILE222, FILE3903 и тому подобное
rm FILE{1,2,15,101} - будут удалены FILE1, FILE2, FILE15, FILE101
git checkout -- {файл} - откатить все изменения в файле
git reset HEAD {файл} - команда для отката, если случайно прописал git add {файл} но какой то конкретный файл не надо киммитить
git reset --hard <номер коммита> - производить сброс в ветке которой находишься вплоть до указанного коммита

git push origin: {название ветки} - удаление ветки на удаленном сервере
git push origin: {название тега} - удаление тега на удаленном сервере

git init - дает папке в которой находится пользователь статус репозитория (но не прикрепляет к чему либо эту папку пока что) на случай если она была вначале создана без git clone
git clone ССЫЛКА папка - клонирует файлы из git в папку (если не введено название то не создает папку)
git status - показывает статус папки и в том числе красным выделяет файлы что не проиницилизированы
git add . (точка не просто так) - все красные файлы переводит в зеленый статус, тем самым их теперь можно отправить в репозиторий
git commit - m " текст" - коментарии к инициализированным файлам
git commit -am "текст" - закоммитить и сделать add одновременно
git commit --amend - дает возможность исправить крайний коммит
git rebase -i коммит - позволяет редактировать ВСЮ историю коммитов (не используй, а то по жопе поличишь)
git push origin master - передача всех инициализированных файлов в удаленный репозиторий
git log -p - посмотреть историю коммитов
git log --oneline - выводит сокращенную форму истории коммитов
git log --all --graph --decorate - просмотре всей истории коммитов всех веток в репозитории
gitk - открывает графический интерфейс git
git gui - интерфейс по созданию коммитов
git show HEAD - выводить инфу о последнем коммите

git remote -v -проверка какие удаленные репозитории привязаны к локальному репозиторию в котором находишься
git remote add orogin http///// - добавляем к локальному репозиторий удаленный репозиторий
git push origin master - передача всех инициализированных файлов в удаленный репозиторий
git pull - скачать одну конкретную ветку и попытается провести merge состояний файлов с удаленного со состоянием файла с компа
git config --global user.name "Имя Фамилия" - теперь все commit будут подписаны моим именем
git checkout main - переключиться на самую актуальную версию файлов
git config --global core.editor vim - выставить vim как редактор по умолчанию (можно и nano вместо vim)

git config --list - выдает описание git (в том числе каким именем буду подписываться)
git config --list --show-origin - показать где храняться все файлы настроек

git diff --cached - показывает зеленым новые строки кода, красным какие строки были удалены в том или ином файле

git branch - выдает весь список веток, помечая текущую ветку
git branch {название ветки} - создает новую ветку
git branch -m {название ветки} {новое название} - переименовать ветку 
git branch -D {название ветки} - удаление ветки
git checkout {название ветки} - переключиться на другую ветку
git merge {название ветки} - навзанную ветку сливает в ветку в которой находишься и так проводится обьединение веток
git merge --abort - откат ветки до состояния слияния (на случай если возникли конфликты слияния)

git config -global alias.{название} 'название команды (можно очень длинные)' - создает макрос для вызова длинных команд, название макроса пишется после alias через току (см. п.1 примечания)

git tag - список доступных тегов
git tag v1.1.0 - приписать тег к коммиту
git tag -a v1.1.0 -m "Новый тег" - приписать тег к коммиту и добавить коментарий
git tag -d v1.1.0 - удалить тег v1.1.0
git tag -l v1.1.* - поиск тега (*-обозначает что любое число может быть в это позиции)
git log - можно увидить разную инфу в том числе и теги
git show {номер тега} - выводить инфу по коммиту и в том числе и описание что было закреплено в теге
git push origin {полный номер тега} - отправить тег на git (как и коммиот пушить, вместо названия ветки указывается название тега)
git push origin --tags - отправить все теги что есть
git ls-remove te --tags origin - запросить информацию о тегах на удаленном репозитории
git branch --all    Смотрим ветки на удаленном репозитории


Простейшая последовательность действий для работы с Git:
1. git clone {ссылка с Git} 
2. touch test.txt - создаю файл
3. git add . - все файлы фиксируются
4. git commit -m 'firs commit' - киммит делаю
5. git push -u origin main - отправляю все файлы что были в add в ветку main

Примечание:
1. git config --global alias.gc 'log --pretty=format:"%C(yellow)%h%Creset-%C(green)%d%Creset %s %C(bold blue)(%cn) %C(green)%cd%Creset" --graph --date=format:"%d.%m.%Y %H:%M 

создайте новый репозиторий в командной строке
echo "# name" >> README.md
git init
git add README.md
git commit -m "first commit"
git branch -M main
git remote add origin "url".git
git push -u origin main

или запустите существующий репозиторий из командной строки
git remote add origin "url".git
git branch -M main
git push -u origin main

One